// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Private/freetrackPrivatePCH.h"
#include "freetrack.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1freetrack() {}
	void UfreetrackBPLibrary::StaticRegisterNativesUfreetrackBPLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UfreetrackBPLibrary::StaticClass(), "getFreetrackData",(Native)&UfreetrackBPLibrary::execgetFreetrackData);
	}
	IMPLEMENT_CLASS(UfreetrackBPLibrary, 2819798477);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	FREETRACK_API class UFunction* Z_Construct_UFunction_UfreetrackBPLibrary_getFreetrackData();
	FREETRACK_API class UClass* Z_Construct_UClass_UfreetrackBPLibrary_NoRegister();
	FREETRACK_API class UClass* Z_Construct_UClass_UfreetrackBPLibrary();
	FREETRACK_API class UPackage* Z_Construct_UPackage__Script_freetrack();
	UFunction* Z_Construct_UFunction_UfreetrackBPLibrary_getFreetrackData()
	{
		struct freetrackBPLibrary_eventgetFreetrackData_Parms
		{
			float TranslationSensitivity;
			float RotationSensitivity;
			FVector translation;
			FRotator rotation;
			bool enabled;
		};
		UObject* Outer=Z_Construct_UClass_UfreetrackBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getFreetrackData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(freetrackBPLibrary_eventgetFreetrackData_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(enabled, freetrackBPLibrary_eventgetFreetrackData_Parms, bool);
			UProperty* NewProp_enabled = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(enabled, freetrackBPLibrary_eventgetFreetrackData_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(enabled, freetrackBPLibrary_eventgetFreetrackData_Parms), sizeof(bool), true);
			UProperty* NewProp_rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(rotation, freetrackBPLibrary_eventgetFreetrackData_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_translation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(translation, freetrackBPLibrary_eventgetFreetrackData_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RotationSensitivity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotationSensitivity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RotationSensitivity, freetrackBPLibrary_eventgetFreetrackData_Parms), 0x0010000000000082);
			UProperty* NewProp_TranslationSensitivity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TranslationSensitivity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslationSensitivity, freetrackBPLibrary_eventgetFreetrackData_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("freetrack"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("get Freetrack Data"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("freetrack get data"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/freetrackBPLibrary.h"));
			MetaData->SetValue(NewProp_RotationSensitivity, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_TranslationSensitivity, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UfreetrackBPLibrary_NoRegister()
	{
		return UfreetrackBPLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UfreetrackBPLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_freetrack();
			OuterClass = UfreetrackBPLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UfreetrackBPLibrary_getFreetrackData());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UfreetrackBPLibrary_getFreetrackData(), "getFreetrackData"); // 1479808594
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("freetrackBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/freetrackBPLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UfreetrackBPLibrary(Z_Construct_UClass_UfreetrackBPLibrary, &UfreetrackBPLibrary::StaticClass, TEXT("UfreetrackBPLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UfreetrackBPLibrary);
	UPackage* Z_Construct_UPackage__Script_freetrack()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/freetrack")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xA0C4E9A9;
			Guid.B = 0x29ECA9FB;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
